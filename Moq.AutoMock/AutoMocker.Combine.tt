<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>

namespace Moq.AutoMock
{
    public partial class AutoMocker
    {
<#
int count = 10;
for (int i = 0; i < count; i++)
{
    var types = new string[i + 1];
    for (int x = 0; x < types.Length; x++)
		types[x] = "TAsWellAs" + (x + 1);

    var typeParams = string.Join(", ", types);
	var parameters = string.Join(", ", types.Select(t => string.Format("typeof({0})", t)));
#>
        /// <summary>
        /// Combines all given types so that they are mocked by the same
        /// mock. Some IoC containers call this "Forwarding" one type to
        /// other interfaces. In the end, this just means that all given
        /// types will be implemented by the same instance.
        /// </summary>
        public void Combine<TService, <#= typeParams #>>()
        {
            Combine(typeof(TService), <#= parameters #>);
        }
<#
	if (i < count - 1)
    {
#>

<#
	}
}
#>
    }
}